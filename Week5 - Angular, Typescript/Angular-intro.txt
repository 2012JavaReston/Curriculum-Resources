What is a framework?
	A framework is a comphrehensive library built to make complex coding applications easier. 
	Allows you to do VERY complex blocks of code with small lines of code. 

Framework vs Library?
	Your code will utilise library functionality to help it along. 
	A FRAMEWORK will use YOUR code like a library to finetune its functionality. 

What is Angular?
	Scafolding to a frontend application, in HTML, CSS and JS/TS. 
	We use this framework because cereating an applicaiton with just JS can becomem
	cumbersome when it becomes very large. 
	Angular is component based. Each PIECE of the heml page will 
		actually be a fragment referred to as a "component"
	A SPA framework. 

SPA - Single Page Application?
	SPA is a web application that fits on a single page in the browser. 
	All the necessary code: HTML, JS and CSS is retrieved by the browser in a single load. 
	So rather than navigation on a website being achieved by using multiple 
	(Static) html page and refereshing, we will dynamically modify elements within the page. 

	Advantages: 
		Fast and responsive: SPA only update the required elements/content. 
			SO HTML, CSS and JS are only loaded once. This is signficantly
			faster than having to navigate to entire webpages. 
		Caching capabilities: SPA can cache requests locally, it can reuse the data and 
			even work offline (with the data being synchronised with the server when possible)

	Disadvantages: 
		Data is frontloaded: the first page can load a little slower 
			(but overall the performance is still better)
		Doesn't perform well with SEO Serach engine optimization. 
		SPA are less secure towards Cross-site (XSS) attacis. 


What is a component?
	A component is the building block of an Angular application. A component will
	consist of 4 files:

		<component-name>.component.html 
		<component-name>.component.css
		<component-name>.component.ts
		<component-name>.component.spect.ts 


A non-exhaustive list of files and folders in Angular:

	.json files: These are configuration files 
		tslint: configures the linting for our project. 
		tsconfig: configures how we want to transpile. 
		angular: configures  the angular project
		package: configures the node.js environments

	src: a folder for our source code
	module.ts: configuration file
	componet.*
	index.html
	app.* : 


Directives and Binding 

	Binding:
		Interpolation (1 way binding) {{}}
		Property  []
		Event ()
		2-way binding [()]

	Directives:
		Structural:
			*ngIf
			*ngFor
		Atribute directives:
			Custom one to pass values between parent and child componetns.
	EventEmitters. 



Inversion of Control

	Is the process of GIVINP UP CONTROL of some functionality to another ENTITY.
	Real world example: IoC would be like asking a Subway worker 
		to make your sandwich as opposed to doing it yourself at home.

	Dependency Injection(DI) design pattern
		DI is a subset of IoC
		The DI design pattern is SPECIFICALLY when the funcitnality you
			give up is in cnotrol of your dpendency. The other ENTITY will 
			then inject your dependencies into your classes when the need 
			arises.
	


	
